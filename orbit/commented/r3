


import numpy as np
import matplotlib.pyplot as plt
from math import cos, sin, atan, pi

def getAcc(pos, mass, G):

    # x and y position of both bodies
    x = pos[:, 0:1]
    y = pos[:, 1:2]

    # distance x, sun - planet
    dx = x[0] - x[1]
    # direction of acceleration on the x-axis. Negative if x of planet > sun and vice versa 
    ax_dir = -1 if dx < 0 else 1

    # distance y, sun - planet
    dy = y[0] - y[1]
    # direction of acceleration on the y-axis. Negative if y of planet > sun and vice versa
    ay_dir = -1 if dy < 0 else 1

    # Calculate distance between planet and sun with pythagoras. 
    r = ( dx**2 + dy**2 ) ** 0.5

    # absolute value of angle in radians
    thet = abs(atan(dy/dx))

    # 1/r^3
    inv_r3 = r**-3

    # Calculate the force of gravity 
    f = G * inv_r3 * mass[0] * mass[1] 

    # Decompose the acceleration vector into x and y. 
    ax = float(cos(thet) * (f/mass[1]) ) * ax_dir
    ay = float(sin(thet) * (f/mass[1]) ) * ay_dir

    # returns the acceleration on the x- and y-axis 
    return np.array([ax, ay])


def main(r, ts):

    # Simulation parameters
    t = 0                    # current time of the simulation
    tEnd = 1000000.0          # time at which simulation ends if an orbit is not yet completed
    dt = ts**2 / (14400 / 1568.6948 )            # timestep, the lower, the more accurate. >1 for faster runtime 
    G = 1.0                  # Newton's Gravitational Constant
    l = int(r*2)             # for plotting graph 
    plotRealTime = False     # switch on for plotting as the simulation goes along

    # Star, Planet (initial conditions)
    mass = np.array([[100], [1]])  
    # r is the radius of the orbit, which will be the initial start posiiton of planet
    pos = np.array([[0.0, 0.0], [r, 0.0]]) 
    # Velocity for orbit calculated = (G*M/r^2)^0.5 
    vel = np.array([0.0, (G*mass[0, 0]/r**2)**0.5 ])  

    # calculate initial gravitational accelerations
    acc = getAcc(pos, mass, G)
    
    # number of timesteps
    Nt = int(np.ceil(tEnd/dt))

    # save positions for plotting trails
    pos_save = np.zeros((2, 2, Nt+1))
    pos_save[:, :, 0] = pos
    t_all = np.arange(Nt+1)*dt

    # prep figure
    fig = plt.figure(figsize=(8, 8), dpi=80)
    grid = plt.GridSpec(1, 1, wspace=0.0, hspace=0.3)
    ax1 = plt.subplot(grid[:, 0])

    # for loop for simulation 
    for i in range(Nt):

        # update velocity by adding acceleration 
        vel += acc * dt

        # update position of planet by velocity
        pos[1] += vel * dt

        # update accelerations
        acc = getAcc(pos, mass, G)

        # update time
        t += dt

        # save positions for plotting trail
        pos_save[:, :, i+1] = pos

        # plot in real time
        if plotRealTime:
            plt.sca(ax1)
            plt.cla()
            xx = pos_save[:, 0, 0:i+1]
            yy = pos_save[:, 1, 0:i+1]
            plt.scatter(xx, yy, s=1, color=[.7, .7, 1])
            plt.scatter(pos[:, 0], pos[:, 1], s=10, color='blue')
            ax1.set(xlim=(-2, 2), ylim=(-2, 2))
            ax1.set_aspect('equal', 'box')
            ax1.set_xticks([i for i in range(-l, l+1, int(l/10))])
            ax1.set_yticks([i for i in range(-l, l+1, int(l/10))])
            plt.pause(0.0001)

        # End simulation after one revolution 
        if ( pos_save[:, 1, i][1] < 0 and pos_save[:, 1, i+1][1] > 0 ):
            # Calculate Kepler's constant with duration of an orbit and radius of orbit
            k = t**2 / r**3
            break
            

    # Show figure
    plt.sca(ax1)
    plt.cla()
    xx = pos_save[:, 0, 0:i+1]
    yy = pos_save[:, 1, 0:i+1]
    plt.scatter(xx, yy, s=1, color=[.7, .7, 1])
    plt.scatter(pos[:, 0], pos[:, 1], s=10, color='blue')
    ax1.set(xlim=(-2, 2), ylim=(-2, 2))
    ax1.set_aspect('equal', 'box')
    ax1.set_xticks([i for i in range(-l, l+1, int(l/10))])
    ax1.set_yticks([i for i in range(-l, l+1, int(l/10))])
    #plt.show(block=False)
    #plt.pause(10)
    plt.close()

    return k

# Variable which stores all the radiuses to be simulated
radius = [i for i in range(50, 1001, 50)]
k = []

# Simulating for every radius and storin Kepler's Constant Value in variable k
for i, r in enumerate(radius, 1):
    k.append(main(r, i))

#Plot Kepler's constant against Orbit radius
plt.scatter(radius, k)
plt.xlabel("Orbit Radius")
plt.ylabel("Kepler's Constant")
plt.xticks([i for i in range(0, 1001, 100)])
#plt.savefig("n.png", dpi=240)
plt.show()

